
#include <stdio.h>
#include <stdlib.h>
#define nullptr ((void*)(0))
#define true 1
#define false 0
struct nodeData {
    int id;
    int arrivalTime;
    int runningTime;
    int priority;
    int finishTime;
    // int remainingTime;
};

typedef struct Node
{
    struct nodeData data;
    struct Node *nextNode;
}Node;

void _Node(Node* node){
    printf("%p\n",node);
    
    ((node->data).runningTime) = 0;
    (node->data).arrivalTime = 0;
    (node->data).priority = 0;
    (node->data).id = 0;
    node->nextNode = nullptr;
    return;
}

void setNext(Node* node,Node*passedNode)  //set the next node in the list
{
    // puts("Here");
    node->nextNode = passedNode;
    // puts("Here");
    return;
}
Node* getNext(Node* node) //get the next node in the list
{
    return node->nextNode;
}
struct nodeData getItem(Node* node)  // get the item data in the node
{
    return node->data;
}

void setItem(Node* node,struct nodeData  i)
{
    node->data = i;
    return;
}


typedef struct LinkedQueue
{
	Node* backPtr;
	Node* frontPtr;
	int Count;
}LinkedQueue;


void _LinkedQueue(LinkedQueue* Q){
	Q->frontPtr = nullptr;
	Q->backPtr = nullptr;
	return;
}

void getCount(LinkedQueue* Q, int C)
{
	C = Q->Count;
}

int isEmpty(LinkedQueue* Q)
{
	return ((Q -> frontPtr)  == nullptr);
}


int enqueue(LinkedQueue* Q,struct nodeData data, int p)
{
	// Insert the new node
	Node* start = Q->frontPtr;
	Node* newNodePtr = malloc(sizeof(Node));
	_Node(newNodePtr);
	newNodePtr->data = data;
	if (isEmpty(Q)){	//special case if this is the first node to insert
		Q->frontPtr = newNodePtr; // The queue is empty
	    Q->backPtr = newNodePtr; // New node is the last node now
	}else if (Q->frontPtr->data.priority < p){
	    setNext(newNodePtr,Q->frontPtr);
        Q->frontPtr = newNodePtr;
	}
    else {
		while(getNext(start) != nullptr && getNext(start)->data.priority < p){
		start = getNext(start); // The queue was not empty
		}
    	setNext(newNodePtr,getNext(start));
    	setNext(start,newNodePtr);
    	if (getNext(newNodePtr) == nullptr){
    	    Q->backPtr = newNodePtr;
    	}
	}
	Q->Count = (Q->Count)+1;
	setNext(Q->backPtr,Q->frontPtr);
	return true;
} // end enqueue


int dequeue(LinkedQueue* Q, struct nodeData * frntEntry)
{
	if (isEmpty(Q))
	{
		frntEntry = nullptr;
		return false;
	}
	Node* nodeToDeletePtr = Q->frontPtr;
	*(frntEntry) = getItem(Q->frontPtr);
	Q->frontPtr = getNext(Q->frontPtr);
	// Queue is not empty; remove front
	if (nodeToDeletePtr == Q->backPtr)	
		Q->backPtr = nullptr;
	Q->Count = (Q->Count)+1;
	return true;
}


int main(int argc, char*argv[]){
    
    Node* node = malloc(sizeof(Node));
    _Node(node);
    Node* node2 = malloc(sizeof(Node));
    _Node(node2);
    LinkedQueue* Q = malloc(sizeof(LinkedQueue));
    _LinkedQueue(Q);
    struct nodeData data;
    for (int i = 0 ; i < 3 ; i++){
        data.runningTime = i;
        data.priority = i+1;
        data.arrivalTime = i+2;
        enqueue(Q,data,i);
    }
    printf("%d\n",Q->Count);
    struct nodeData data2;
    dequeue(Q,&data2);
    // dequeue(Q,&data2);
    
    puts("That");
    setNext(node,node2);
    printf("%d\n",data2.arrivalTime);
    char* str1 = "-sch";
    char* str2 = argv[1];
    // printf("%c\n",str1[4]);
    puts("kill");
}

